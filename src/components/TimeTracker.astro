---
// TimeTracker.astro - Component for tracking time on hourly projects
const { userId, projectId, projectName } = Astro.props;

// Define interfaces for TypeScript type safety
interface TimeEntry {
  id: string;
  projectId: string;
  projectName: string;
  description: string;
  startTime: Date;
  endTime: Date;
  duration: number;
  billable: boolean;
  invoiced: boolean;
}

interface GroupedEntries {
  [key: string]: TimeEntry[];
}

// Sample time entries for demonstration
const timeEntries: TimeEntry[] = [
  {
    id: 't1',
    projectId: 'p1',
    projectName: 'E-commerce Website Redesign',
    description: 'Homepage wireframing and prototyping',
    startTime: new Date('2025-05-01T09:30:00'),
    endTime: new Date('2025-05-01T12:45:00'),
    duration: 3.25, // hours
    billable: true,
    invoiced: false
  },
  {
    id: 't2',
    projectId: 'p1',
    projectName: 'E-commerce Website Redesign',
    description: 'Product page design iterations',
    startTime: new Date('2025-05-01T14:15:00'),
    endTime: new Date('2025-05-01T17:30:00'),
    duration: 3.25, // hours
    billable: true,
    invoiced: false
  },
  {
    id: 't3',
    projectId: 'p2',
    projectName: 'Mobile Banking App',
    description: 'User flow analysis and research',
    startTime: new Date('2025-04-30T10:00:00'),
    endTime: new Date('2025-04-30T15:30:00'),
    duration: 5.5, // hours
    billable: true,
    invoiced: true
  }
];

// Group time entries by project and date
const groupedEntries: GroupedEntries = timeEntries.reduce((acc: GroupedEntries, entry: TimeEntry) => {
  const dateKey = entry.startTime.toLocaleDateString();
  
  if (!acc[dateKey]) {
    acc[dateKey] = [];
  }
  
  acc[dateKey].push(entry);
  return acc;
}, {});

// Calculate total hours tracked
const totalHours = timeEntries.reduce((sum, entry) => sum + entry.duration, 0);
const totalBillableHours = timeEntries
  .filter(entry => entry.billable)
  .reduce((sum, entry) => sum + entry.duration, 0);
const totalInvoicedHours = timeEntries
  .filter(entry => entry.invoiced)
  .reduce((sum, entry) => sum + entry.duration, 0);

// For the timer functionality
const activeProjects = [
  { id: 'p1', name: 'E-commerce Website Redesign' },
  { id: 'p2', name: 'Mobile Banking App' },
  { id: 'p3', name: 'Travel Platform' },
  { id: 'p4', name: 'Food Delivery App' }
];
---

<div class="time-tracker">
  <div class="tracker-header">
    <h2 class="section-title">Time Tracking</h2>
    <p class="section-description">Track billable hours for your hourly-rate projects</p>
  </div>

  <!-- Active Timer Section -->
  <div class="tracker-card timer-card" id="active-timer-card">
    <div class="card-header">
      <h3 class="card-title">Track Time</h3>
      <div class="timer-display" id="timer-display">00:00:00</div>
    </div>
    
    <div class="timer-form">
      <div class="form-group">
        <label for="project-select">Project</label>
        <select id="project-select" class="form-control">
          <option value="">Select a project</option>
          {activeProjects.map(project => (
            <option value={project.id}>{project.name}</option>
          ))}
        </select>
      </div>
      
      <div class="form-group">
        <label for="description-input">Description</label>
        <input 
          type="text" 
          id="description-input" 
          class="form-control" 
          placeholder="What are you working on?"
        />
      </div>
      
      <div class="form-check">
        <input type="checkbox" id="billable-check" class="form-check-input" checked />
        <label for="billable-check" class="form-check-label">Billable</label>
      </div>
      
      <div class="timer-actions">
        <button id="start-timer-btn" class="btn btn-start">
          <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-5 h-5">
            <path stroke-linecap="round" stroke-linejoin="round" d="M5.25 5.653c0-.856.917-1.398 1.667-.986l11.54 6.348a1.125 1.125 0 010 1.971l-11.54 6.347a1.125 1.125 0 01-1.667-.985V5.653z" />
          </svg>
          Start Timer
        </button>
        
        <button id="stop-timer-btn" class="btn btn-stop hidden">
          <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-5 h-5">
            <path stroke-linecap="round" stroke-linejoin="round" d="M5.25 7.5A2.25 2.25 0 017.5 5.25h9a2.25 2.25 0 012.25 2.25v9a2.25 2.25 0 01-2.25 2.25h-9a2.25 2.25 0 01-2.25-2.25v-9z" />
          </svg>
          Stop Timer
        </button>
      </div>
    </div>
  </div>

  <!-- Time Summary Card -->
  <div class="tracker-card summary-card">
    <div class="card-header">
      <h3 class="card-title">Time Summary</h3>
    </div>
    
    <div class="summary-stats">
      <div class="stat-item">
        <div class="stat-value">{totalHours.toFixed(2)}</div>
        <div class="stat-label">Total Hours</div>
      </div>
      
      <div class="stat-item">
        <div class="stat-value">{totalBillableHours.toFixed(2)}</div>
        <div class="stat-label">Billable Hours</div>
      </div>
      
      <div class="stat-item">
        <div class="stat-value">${(totalBillableHours * 75).toFixed(2)}</div>
        <div class="stat-label">Billable Amount</div>
      </div>
      
      <div class="stat-item">
        <div class="stat-value">{totalInvoicedHours.toFixed(2)}</div>
        <div class="stat-label">Invoiced Hours</div>
      </div>
    </div>
  </div>

  <!-- Time Entries List -->
  <div class="tracker-card entries-card">
    <div class="card-header">
      <h3 class="card-title">Recent Time Entries</h3>
      <div class="card-actions">
        <button class="btn btn-icon" id="export-entries-btn" title="Export timesheet">
          <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-5 h-5">
            <path stroke-linecap="round" stroke-linejoin="round" d="M3 16.5v2.25A2.25 2.25 0 005.25 21h13.5A2.25 2.25 0 0021 18.75V16.5M16.5 12L12 16.5m0 0L7.5 12m4.5 4.5V3" />
          </svg>
        </button>
        <button class="btn btn-icon" id="filter-entries-btn" title="Filter entries">
          <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-5 h-5">
            <path stroke-linecap="round" stroke-linejoin="round" d="M12 3c2.755 0 5.455.232 8.083.678.533.09.917.556.917 1.096v1.044a2.25 2.25 0 01-.659 1.591l-5.432 5.432a2.25 2.25 0 00-.659 1.591v2.927a2.25 2.25 0 01-1.244 2.013L9.75 21v-6.568a2.25 2.25 0 00-.659-1.591L3.659 7.409A2.25 2.25 0 013 5.818V4.774c0-.54.384-1.006.917-1.096A48.32 48.32 0 0112 3z" />
          </svg>
        </button>
      </div>
    </div>
    
    <div class="time-entries">
      {Object.entries(groupedEntries).map(([dateKey, entries]) => (
        <div class="entry-date-group">
          <div class="date-header">
            <h4 class="date-title">{dateKey}</h4>
            <div class="date-total">{entries.reduce((sum, entry) => sum + entry.duration, 0).toFixed(2)} hrs</div>
          </div>
          
          {entries.map(entry => (
            <div class="time-entry">
              <div class="entry-project">
                <div class="project-indicator" style={`background-color: ${entry.projectId === 'p1' ? '#6366f1' : entry.projectId === 'p2' ? '#8b5cf6' : '#ec4899'}`}></div>
                <span>{entry.projectName}</span>
              </div>
              
              <div class="entry-description">{entry.description}</div>
              
              <div class="entry-time">
                <div class="time-range">
                  {entry.startTime.toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'})} - 
                  {entry.endTime.toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'})}
                </div>
                <div class="time-duration">{entry.duration.toFixed(2)} hrs</div>
              </div>
              
              <div class="entry-actions">
                <button class="btn btn-icon" title="Edit entry">
                  <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-4 h-4">
                    <path stroke-linecap="round" stroke-linejoin="round" d="M16.862 4.487l1.687-1.688a1.875 1.875 0 112.652 2.652L10.582 16.07a4.5 4.5 0 01-1.897 1.13L6 18l.8-2.685a4.5 4.5 0 011.13-1.897l8.932-8.931zm0 0L19.5 7.125M18 14v4.75A2.25 2.25 0 0115.75 21H5.25A2.25 2.25 0 013 18.75V8.25A2.25 2.25 0 015.25 6H10" />
                  </svg>
                </button>
                <button class="btn btn-icon" title="Delete entry">
                  <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-4 h-4">
                    <path stroke-linecap="round" stroke-linejoin="round" d="M14.74 9l-.346 9m-4.788 0L9.26 9m9.968-3.21c.342.052.682.107 1.022.166m-1.022-.165L18.16 19.673a2.25 2.25 0 01-2.244 2.077H8.084a2.25 2.25 0 01-2.244-2.077L4.772 5.79m14.456 0a48.108 48.108 0 00-3.478-.397m-12 .562c.34-.059.68-.114 1.022-.165m0 0a48.11 48.11 0 013.478-.397m7.5 0v-.916c0-1.18-.91-2.164-2.09-2.201a51.964 51.964 0 00-3.32 0c-1.18.037-2.09 1.022-2.09 2.201v.916m7.5 0a48.667 48.667 0 00-7.5 0" />
                  </svg>
                </button>
                <button class="btn btn-icon" title={entry.invoiced ? "Invoiced" : "Generate invoice"}>
                  <svg xmlns="http://www.w3.org/2000/svg" fill={entry.invoiced ? "currentColor" : "none"} viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-4 h-4">
                    <path stroke-linecap="round" stroke-linejoin="round" d="M9 14.25l6-6m4.5-3.493V21.75l-3.75-1.5-3.75 1.5-3.75-1.5-3.75 1.5V4.757c0-1.108.806-2.057 1.907-2.185a48.507 48.507 0 0111.186 0c1.1.128 1.907 1.077 1.907 2.185z" />
                  </svg>
                </button>
              </div>
            </div>
          ))}
        </div>
      ))}
    </div>
    
    <div class="entries-footer">
      <button class="btn btn-text" id="view-all-entries-btn">
        View All Time Entries
      </button>
    </div>
  </div>
  
  <!-- Reports Card -->
  <div class="tracker-card reports-card">
    <div class="card-header">
      <h3 class="card-title">Time Reports</h3>
    </div>
    
    <div class="reports-options">
      <div class="report-option">
        <div class="report-icon">
          <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" d="M3 13.125C3 12.504 3.504 12 4.125 12h2.25c.621 0 1.125.504 1.125 1.125v6.75C7.5 20.496 6.996 21 6.375 21h-2.25A1.125 1.125 0 013 19.875v-6.75zM9.75 8.625c0-.621.504-1.125 1.125-1.125h2.25c.621 0 1.125.504 1.125 1.125v11.25c0 .621-.504 1.125-1.125 1.125h-2.25a1.125 1.125 0 01-1.125-1.125V8.625zM16.5 4.125c0-.621.504-1.125 1.125-1.125h2.25C20.496 3 21 3.504 21 4.125v15.75c0 .621-.504 1.125-1.125 1.125h-2.25a1.125 1.125 0 01-1.125-1.125V4.125z" />
          </svg>
        </div>
        <div class="report-info">
          <h4>Weekly Summary</h4>
          <p>Hours tracked by project and day</p>
        </div>
        <button class="btn btn-icon">
          <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" d="M8.25 4.5l7.5 7.5-7.5 7.5" />
          </svg>
        </button>
      </div>
      
      <div class="report-option">
        <div class="report-icon">
          <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" d="M2.25 18L9 11.25l4.306 4.307a11.95 11.95 0 015.814-5.519l2.74-1.22m0 0l-5.94-2.28m5.94 2.28l-2.28 5.941" />
          </svg>
        </div>
        <div class="report-info">
          <h4>Project Breakdown</h4>
          <p>Time distribution across projects</p>
        </div>
        <button class="btn btn-icon">
          <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" d="M8.25 4.5l7.5 7.5-7.5 7.5" />
          </svg>
        </button>
      </div>
      
      <div class="report-option">
        <div class="report-icon">
          <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" d="M6.75 3v2.25M17.25 3v2.25M3 18.75V7.5a2.25 2.25 0 012.25-2.25h13.5A2.25 2.25 0 0121 7.5v11.25m-18 0A2.25 2.25 0 005.25 21h13.5A2.25 2.25 0 0021 18.75m-18 0v-7.5A2.25 2.25 0 015.25 9h13.5A2.25 2.25 0 0121 11.25v7.5m-9-6h.008v.008H12v-.008zM12 15h.008v.008H12V15zm0 2.25h.008v.008H12v-.008zM9.75 15h.008v.008H9.75V15zm0 2.25h.008v.008H9.75v-.008zM7.5 15h.008v.008H7.5V15zm0 2.25h.008v.008H7.5v-.008zm6.75-4.5h.008v.008h-.008v-.008zm0 2.25h.008v.008h-.008V15zm0 2.25h.008v.008h-.008v-.008zm2.25-4.5h.008v.008H16.5v-.008zm0 2.25h.008v.008H16.5V15z" />
          </svg>
        </div>
        <div class="report-info">
          <h4>Monthly Report</h4>
          <p>Detailed monthly time and earnings</p>
        </div>
        <button class="btn btn-icon">
          <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" d="M8.25 4.5l7.5 7.5-7.5 7.5" />
          </svg>
        </button>
      </div>
      
      <div class="report-option">
        <div class="report-icon">
          <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" d="M19.5 14.25v-2.625a3.375 3.375 0 00-3.375-3.375h-1.5A1.125 1.125 0 0113.5 7.125v-1.5a3.375 3.375 0 00-3.375-3.375H8.25M9 16.5v.75m3-3v3M15 12v5.25m-4.5-15H5.625c-.621 0-1.125.504-1.125 1.125v17.25c0 .621.504 1.125 1.125 1.125h12.75c.621 0 1.125-.504 1.125-1.125V11.25a9 9 0 00-9-9z" />
          </svg>
        </div>
        <div class="report-info">
          <h4>Custom Report</h4>
          <p>Create a custom time report</p>
        </div>
        <button class="btn btn-icon">
          <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" d="M8.25 4.5l7.5 7.5-7.5 7.5" />
          </svg>
        </button>
      </div>
    </div>
  </div>
</div>

<style>
  .time-tracker {
    display: flex;
    flex-direction: column;
    gap: 1.5rem;
    width: 100%;
  }

  .tracker-header {
    margin-bottom: 0.5rem;
  }

  .section-title {
    font-size: 1.5rem;
    font-weight: 600;
    margin-bottom: 0.5rem;
    color: var(--text-color, #1e293b);
  }

  .section-description {
    color: var(--text-light, #64748b);
    font-size: 0.875rem;
  }

  .tracker-card {
    background-color: white;
    border-radius: var(--border-radius-md, 0.75rem);
    box-shadow: var(--shadow-sm, 0 1px 3px 0 rgb(0 0 0 / 0.1), 0 1px 2px -1px rgb(0 0 0 / 0.1));
    overflow: hidden;
  }

  .card-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 1rem 1.5rem;
    border-bottom: 1px solid #e5e7eb;
  }

  .card-title {
    font-size: 1rem;
    font-weight: 600;
    color: var(--text-color, #1e293b);
  }

  .card-actions {
    display: flex;
    gap: 0.5rem;
  }

  /* Timer Card */
  .timer-card {
    background-image: linear-gradient(135deg, rgba(99, 102, 241, 0.05) 0%, rgba(139, 92, 246, 0.1) 100%);
  }

  .timer-display {
    font-size: 1.25rem;
    font-weight: 700;
    font-family: monospace;
    color: var(--primary-color, #6366f1);
  }

  .timer-form {
    padding: 1.5rem;
  }

  .form-group {
    margin-bottom: 1rem;
  }

  .form-group label {
    display: block;
    font-size: 0.875rem;
    font-weight: 500;
    color: var(--text-color, #1e293b);
    margin-bottom: 0.5rem;
  }

  .form-control {
    width: 100%;
    padding: 0.75rem 1rem;
    border: 1px solid #e5e7eb;
    border-radius: var(--border-radius-sm, 0.375rem);
    font-size: 0.875rem;
  }

  .form-check {
    display: flex;
    align-items: center;
    margin-bottom: 1rem;
  }

  .form-check-input {
    margin-right: 0.5rem;
  }

  .form-check-label {
    font-size: 0.875rem;
  }

  .timer-actions {
    display: flex;
    gap: 1rem;
  }

  .btn {
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 0.5rem;
    font-weight: 500;
    font-size: 0.875rem;
    border-radius: var(--border-radius-sm, 0.375rem);
    transition: all 0.2s ease;
    padding: 0.75rem 1.25rem;
    border: none;
    cursor: pointer;
  }

  .btn-icon {
    padding: 0.5rem;
    border-radius: 50%;
    background-color: transparent;
    color: var(--text-light, #64748b);
  }

  .btn-icon:hover {
    background-color: #f3f4f6;
    color: var(--primary-color, #6366f1);
  }

  .btn-icon svg {
    width: 1.25rem;
    height: 1.25rem;
  }

  .btn-start {
    background-color: #10b981;
    color: white;
    flex: 1;
  }

  .btn-start:hover {
    background-color: #059669;
  }

  .btn-stop {
    background-color: #ef4444;
    color: white;
    flex: 1;
  }

  .btn-stop:hover {
    background-color: #dc2626;
  }

  .btn-text {
    background-color: transparent;
    color: var(--primary-color, #6366f1);
    padding: 0.5rem;
  }

  .btn-text:hover {
    background-color: rgba(99, 102, 241, 0.05);
  }

  .hidden {
    display: none;
  }

  /* Summary Card */
  .summary-stats {
    display: grid;
    grid-template-columns: repeat(2, 1fr);
    gap: 1.5rem;
    padding: 1.5rem;
  }

  @media (min-width: 640px) {
    .summary-stats {
      grid-template-columns: repeat(4, 1fr);
    }
  }

  .stat-item {
    display: flex;
    flex-direction: column;
    align-items: center;
    text-align: center;
  }

  .stat-value {
    font-size: 1.5rem;
    font-weight: 700;
    margin-bottom: 0.25rem;
    color: var(--text-color, #1e293b);
  }

  .stat-label {
    font-size: 0.75rem;
    color: var(--text-light, #64748b);
  }

  /* Time Entries */
  .time-entries {
    max-height: 400px;
    overflow-y: auto;
    padding: 0 1.5rem;
  }

  .entry-date-group {
    margin-bottom: 1rem;
  }

  .date-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 0.75rem 0;
    position: sticky;
    top: 0;
    background-color: white;
    z-index: 1;
  }

  .date-title {
    font-size: 0.875rem;
    font-weight: 600;
    color: var(--text-color, #1e293b);
  }

  .date-total {
    font-size: 0.875rem;
    color: var (--text-light, #64748b);
  }

  .time-entry {
    display: grid;
    grid-template-columns: 1fr 2fr 1fr auto;
    gap: 1rem;
    padding: 0.75rem;
    border-radius: var(--border-radius-sm, 0.375rem);
    background-color: #f9fafb;
    margin-bottom: 0.75rem;
    align-items: center;
  }

  .entry-project {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    font-size: 0.875rem;
    font-weight: 500;
    color: var(--text-color, #1e293b);
  }

  .project-indicator {
    width: 0.75rem;
    height: 0.75rem;
    border-radius: 50%;
  }

  .entry-description {
    font-size: 0.875rem;
    color: var(--text-color, #1e293b);
  }

  .entry-time {
    font-size: 0.75rem;
    color: var(--text-light, #64748b);
    text-align: right;
  }

  .time-range {
    margin-bottom: 0.25rem;
  }

  .time-duration {
    font-weight: 600;
    color: var(--text-color, #1e293b);
  }

  .entry-actions {
    display: flex;
    gap: 0.25rem;
  }

  .entries-footer {
    display: flex;
    justify-content: center;
    padding: 1rem 1.5rem;
    border-top: 1px solid #e5e7eb;
  }

  /* Reports Card */
  .reports-options {
    padding: 1.5rem;
    display: flex;
    flex-direction: column;
    gap: 1rem;
  }

  .report-option {
    display: flex;
    align-items: center;
    gap: 1rem;
    padding: 1rem;
    border-radius: var(--border-radius-md, 0.75rem);
    background-color: #f9fafb;
    transition: all 0.2s ease;
    cursor: pointer;
  }

  .report-option:hover {
    background-color: #f3f4f6;
    transform: translateY(-2px);
  }

  .report-icon {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 2.5rem;
    height: 2.5rem;
    border-radius: var(--border-radius-sm, 0.375rem);
    background-image: var(--primary-gradient, linear-gradient(135deg, #6366f1 0%, #8b5cf6 100%));
    color: white;
  }

  .report-icon svg {
    width: 1.25rem;
    height: 1.25rem;
  }

  .report-info {
    flex: 1;
  }

  .report-info h4 {
    font-size: 0.875rem;
    font-weight: 600;
    color: var(--text-color, #1e293b);
    margin-bottom: 0.25rem;
  }

  .report-info p {
    font-size: 0.75rem;
    color: var(--text-light, #64748b);
  }

  @media (max-width: 768px) {
    .time-entry {
      grid-template-columns: 1fr;
      gap: 0.5rem;
    }
    
    .entry-actions {
      justify-content: flex-end;
    }
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    // DOM elements - TypeScript proper casting for HTML elements
    const startTimerBtn = document.getElementById('start-timer-btn') as HTMLButtonElement;
    const stopTimerBtn = document.getElementById('stop-timer-btn') as HTMLButtonElement;
    const timerDisplay = document.getElementById('timer-display') as HTMLDivElement;
    const projectSelect = document.getElementById('project-select') as HTMLSelectElement;
    const descriptionInput = document.getElementById('description-input') as HTMLInputElement;
    const billableCheck = document.getElementById('billable-check') as HTMLInputElement;
    const exportEntriesBtn = document.getElementById('export-entries-btn') as HTMLButtonElement;
    const filterEntriesBtn = document.getElementById('filter-entries-btn') as HTMLButtonElement;
    const viewAllEntriesBtn = document.getElementById('view-all-entries-btn') as HTMLButtonElement;
    
    // Timer variables with proper type definitions
    let timerInterval: ReturnType<typeof setInterval>;
    let startTime: number;
    let elapsedTime: number = 0;
    let isRunning: boolean = false;
    
    // Timer functions
    function startTimer(): void {
      if (projectSelect && projectSelect.value === '') {
        alert('Please select a project before starting the timer.');
        return;
      }
      
      startTime = Date.now() - elapsedTime;
      timerInterval = setInterval(updateTimer, 1000);
      isRunning = true;
      
      // Update UI
      if (startTimerBtn && stopTimerBtn) {
        startTimerBtn.classList.add('hidden');
        stopTimerBtn.classList.remove('hidden');
      }
      
      // Disable project selection while timer is running
      if (projectSelect) {
        projectSelect.disabled = true;
      }
    }
    
    function stopTimer(): void {
      if (timerInterval) {
        clearInterval(timerInterval);
      }
      isRunning = false;
      
      // Calculate final time
      const endTime = Date.now();
      const duration = (endTime - startTime) / 1000; // in seconds
      
      // Create new time entry
      if (duration > 60) { // Only save if more than a minute
        saveTimeEntry({
          projectId: projectSelect?.value || '',
          projectName: projectSelect?.options[projectSelect.selectedIndex]?.text || 'Unknown Project',
          description: descriptionInput?.value || 'No description',
          startTime: new Date(startTime),
          endTime: new Date(endTime),
          duration: duration / 3600, // convert to hours
          billable: billableCheck?.checked || false,
          invoiced: false
        });
      }
      
      // Reset timer
      elapsedTime = 0;
      updateTimerDisplay();
      
      // Update UI
      if (stopTimerBtn && startTimerBtn) {
        stopTimerBtn.classList.add('hidden');
        startTimerBtn.classList.remove('hidden');
      }
      
      // Re-enable project selection
      if (projectSelect) {
        projectSelect.disabled = false;
      }
      
      // Clear description
      if (descriptionInput) {
        descriptionInput.value = '';
      }
    }
    
    function updateTimer(): void {
      elapsedTime = Date.now() - startTime;
      updateTimerDisplay();
    }
    
    function updateTimerDisplay(): void {
      const totalSeconds = Math.floor(elapsedTime / 1000);
      const hours = Math.floor(totalSeconds / 3600);
      const minutes = Math.floor((totalSeconds % 3600) / 60);
      const seconds = totalSeconds % 60;
      
      if (timerDisplay) {
        timerDisplay.textContent = `${formatTimeUnit(hours)}:${formatTimeUnit(minutes)}:${formatTimeUnit(seconds)}`;
      }
    }
    
    function formatTimeUnit(unit: number): string {
      return unit < 10 ? `0${unit}` : unit.toString();
    }
    
    interface TimeEntryData {
      projectId: string;
      projectName: string;
      description: string;
      startTime: Date;
      endTime: Date;
      duration: number;
      billable: boolean;
      invoiced: boolean;
    }
    
    function saveTimeEntry(entry: TimeEntryData): void {
      // In a real app, this would save to a database
      console.log('Saving time entry:', entry);
      
      // For demo purposes, we'll just show a success message
      const toast = document.createElement('div');
      toast.className = 'toast-notification';
      toast.innerHTML = `
        <div class="toast-content">
          <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" d="M9 12.75L11.25 15 15 9.75M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
          </svg>
          <div>
            <strong>Time entry saved</strong>
            <p>${entry.duration.toFixed(2)} hours tracked for ${entry.projectName}</p>
          </div>
        </div>
      `;
      
      document.body.appendChild(toast);
      
      // Remove the toast after 3 seconds
      setTimeout(() => {
        toast.classList.add('toast-hide');
        setTimeout(() => {
          document.body.removeChild(toast);
        }, 300);
      }, 3000);
      
      // In a real application, we would refresh the list of time entries here
    }
    
    // Export time entries
    function exportTimeEntries(): void {
      alert('In a production app, this would generate a CSV or PDF timesheet');
    }
    
    // Event listeners
    if (startTimerBtn) {
      startTimerBtn.addEventListener('click', startTimer);
    }
    
    if (stopTimerBtn) {
      stopTimerBtn.addEventListener('click', stopTimer);
    }
    
    if (exportEntriesBtn) {
      exportEntriesBtn.addEventListener('click', exportTimeEntries);
    }
    
    if (filterEntriesBtn) {
      filterEntriesBtn.addEventListener('click', () => {
        alert('In a production app, this would open a filter menu');
      });
    }
    
    if (viewAllEntriesBtn) {
      viewAllEntriesBtn.addEventListener('click', () => {
        alert('In a production app, this would navigate to a detailed timesheet view');
      });
    }
    
    // Add click handlers for report options
    const reportOptions = document.querySelectorAll('.report-option');
    reportOptions.forEach(option => {
      option.addEventListener('click', () => {
        const headingElement = option.querySelector('h4');
        const reportName = headingElement ? headingElement.textContent || 'report' : 'report';
        alert(`In a production app, this would open the ${reportName} view`);
      });
    });
    
    // Add global style for toast notifications
    const style = document.createElement('style');
    style.textContent = `
      .toast-notification {
        position: fixed;
        bottom: 1.5rem;
        right: 1.5rem;
        background-color: white;
        border-radius: 0.5rem;
        box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -4px rgba(0, 0, 0, 0.1);
        padding: 1rem;
        z-index: 50;
        transition: all 0.3s ease;
        max-width: 24rem;
      }
      
      .toast-content {
        display: flex;
        align-items: center;
        gap: 0.75rem;
      }
      
      .toast-content svg {
        width: 1.5rem;
        height: 1.5rem;
        color: #10b981;
      }
      
      .toast-content strong {
        display: block;
        font-size: 0.875rem;
        margin-bottom: 0.25rem;
      }
      
      .toast-content p {
        font-size: 0.75rem;
        color: #64748b;
      }
      
      .toast-hide {
        opacity: 0;
        transform: translateY(1rem);
      }
    `;
    document.head.appendChild(style);
  });
</script>