---
// Import components
import LanguageSelector from './LanguageSelector.astro';
import Notifications from './Notifications.astro';

// Define current path to handle active link styling
const currentPath = Astro.url.pathname;

// Get the current language from props
const { currentLanguage = 'en', userId } = Astro.props;
---

<script>
  // Set theme before page renders to avoid flash of incorrect theme
  (function() {
    try {
      const theme = localStorage.getItem('color-theme');
      if (theme === 'dark' || (!theme && window.matchMedia('(prefers-color-scheme: dark)').matches)) {
        document.documentElement.classList.add('dark');
      } else {
        document.documentElement.classList.remove('dark');
      }
    } catch (e) {}
  })();
</script>

<header class="fixed top-0 left-0 w-full z-50 bg-white/90 dark:bg-neutral-800/90 backdrop-blur-lg shadow-sm transition-all duration-200">
  <div class="container-custom mx-auto">
    <div class="flex justify-between items-center h-20">
      <div class="flex items-center z-20">
        <a href="/" class="text-xl font-bold text-gradient">
          neuroei8gt
        </a>
      </div>
      
      <button 
        id="mobile-menu-button" 
        class="lg:hidden relative z-20 w-10 h-10 flex flex-col justify-center items-center"
        aria-label="Toggle menu"
      >
        <span class="block w-6 h-0.5 bg-neutral-800 dark:bg-white mb-1.5 transition-transform origin-center"></span>
        <span class="block w-6 h-0.5 bg-neutral-800 dark:bg-white mb-1.5 transition-opacity"></span>
        <span class="block w-6 h-0.5 bg-neutral-800 dark:bg-white transition-transform origin-center"></span>
      </button>

      <nav id="main-nav" class="hidden lg:flex items-center">
        <ul class="flex items-center space-x-8">
          <li>
            <a 
              href="/" 
              class={`py-2 relative font-medium transition-colors duration-200
                ${currentPath === "/" 
                  ? "text-primary-600 dark:text-primary-400" 
                  : "text-neutral-800 dark:text-neutral-200 hover:text-primary-600 dark:hover:text-primary-400"}`}
            >
              Home
              {currentPath === "/" && (
                <span class="absolute bottom-0 left-0 w-full h-0.5 bg-primary-600 dark:bg-primary-400"></span>
              )}
            </a>
          </li>
          <li>
            <a 
              href="/projects" 
              class={`py-2 relative font-medium transition-colors duration-200
                ${currentPath === "/projects" 
                  ? "text-primary-600 dark:text-primary-400" 
                  : "text-neutral-800 dark:text-neutral-200 hover:text-primary-600 dark:hover:text-primary-400"}`}
            >
              Projects
              {currentPath === "/projects" && (
                <span class="absolute bottom-0 left-0 w-full h-0.5 bg-primary-600 dark:bg-primary-400"></span>
              )}
            </a>
          </li>
          <li>
            <a 
              href="/profile" 
              class={`py-2 relative font-medium transition-colors duration-200
                ${currentPath.includes("/profile") 
                  ? "text-primary-600 dark:text-primary-400" 
                  : "text-neutral-800 dark:text-neutral-200 hover:text-primary-600 dark:hover:text-primary-400"}`}
            >
              Profile
              {currentPath.includes("/profile") && (
                <span class="absolute bottom-0 left-0 w-full h-0.5 bg-primary-600 dark:bg-primary-400"></span>
              )}
            </a>
          </li>
          <li>
            <a href="/admin" class="btn-primary ml-2">Admin Dashboard</a>
          </li>
        </ul>
      </nav>

      <div class="hidden lg:flex items-center space-x-4">
        <!-- Theme Toggle -->
        <button id="theme-toggle" class="p-2 rounded-full hover:bg-neutral-100 dark:hover:bg-neutral-700 transition-colors">
          <span class="sr-only">Toggle dark mode</span>
          <svg data-icon="dark" xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20.354 15.354A9 9 0 018.646 3.646 9.003 9.003 0 0012 21a9.003 9.003 0 008.354-5.646z" />
          </svg>
          <svg data-icon="light" xmlns="http://www.w3.org/2000/svg" class="hidden h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 3v1m0 16v1m9-9h-1M4 12H3m15.364 6.364l-.707-.707M6.343 6.343l-.707-.707m12.728 0l-.707.707M6.343 17.657l-.707.707M16 12a4 4 0 11-8 0 4 4 0 018 0z" />
          </svg>
        </button>
        
        <!-- Notifications component -->
        <div class="relative">
          <Notifications userId={userId} />
        </div>
        
        <!-- Language selector component -->
        <div>
          <LanguageSelector currentLanguage={currentLanguage} />
        </div>
      </div>
    </div>
  </div>
  
  <!-- Mobile Navigation -->
  <div id="mobile-menu" class="fixed inset-0 bg-white dark:bg-neutral-900 z-10 flex-col items-center justify-center text-center pt-20 pb-8 px-4 hidden">
    <ul class="space-y-6 w-full max-w-xs mx-auto">
      <li>
        <a 
          href="/" 
          class={`block py-2 text-lg font-medium ${currentPath === "/" ? "text-primary-600 dark:text-primary-400" : "text-neutral-800 dark:text-neutral-200"}`}
        >
          Home
        </a>
      </li>
      <li>
        <a 
          href="/projects" 
          class={`block py-2 text-lg font-medium ${currentPath === "/projects" ? "text-primary-600 dark:text-primary-400" : "text-neutral-800 dark:text-neutral-200"}`}
        >
          Projects
        </a>
      </li>
      <li>
        <a 
          href="/profile" 
          class={`block py-2 text-lg font-medium ${currentPath.includes("/profile") ? "text-primary-600 dark:text-primary-400" : "text-neutral-800 dark:text-neutral-200"}`}
        >
          Profile
        </a>
      </li>
      <li class="pt-4">
        <a href="/admin" class="btn-primary w-full">Admin Dashboard</a>
      </li>
    </ul>
    
    <div class="flex justify-center space-x-6 mt-8">
      <!-- Theme Toggle for Mobile -->
      <button id="mobile-theme-toggle" class="p-2 rounded-full hover:bg-neutral-100 dark:hover:bg-neutral-700">
        <span class="sr-only">Toggle dark mode</span>
        <svg data-icon="dark" xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20.354 15.354A9 9 0 018.646 3.646 9.003 9.003 0 0012 21a9.003 9.003 0 008.354-5.646z" />
        </svg>
        <svg data-icon="light" xmlns="http://www.w3.org/2000/svg" class="hidden h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 3v1m0 16v1m9-9h-1M4 12H3m15.364 6.364l-.707-.707M6.343 6.343l-.707-.707m12.728 0l-.707.707M6.343 17.657l-.707.707M16 12a4 4 0 11-8 0 4 4 0 018 0z" />
        </svg>
      </button>
      
      <!-- Mobile Language selector -->
      <div>
        <LanguageSelector currentLanguage={currentLanguage} />
      </div>
      
      <!-- Mobile Notifications -->
      <div>
        <Notifications userId={userId} />
      </div>
    </div>
  </div>
</header>

<script>
  // Handle header appearance change on scroll
  const header = document.querySelector('header');
  const mobileMenuBtn = document.getElementById('mobile-menu-button');
  const mobileMenu = document.getElementById('mobile-menu');
  const mobileThemeToggle = document.getElementById('mobile-theme-toggle');
  const themeToggle = document.getElementById('theme-toggle');

  // Function to copy theme toggle state
  function updateThemeToggleState() {
    const isDark = document.documentElement.classList.contains('dark');
    
    // Update desktop toggle
    if (themeToggle) {
      const darkIcon = themeToggle.querySelector('[data-icon="dark"]');
      const lightIcon = themeToggle.querySelector('[data-icon="light"]');
      
      if (darkIcon && lightIcon) {
        if (isDark) {
          darkIcon.classList.add('hidden');
          lightIcon.classList.remove('hidden');
        } else {
          darkIcon.classList.remove('hidden');
          lightIcon.classList.add('hidden');
        }
      }
    }
    
    // Update mobile toggle
    if (mobileThemeToggle) {
      const darkIcon = mobileThemeToggle.querySelector('[data-icon="dark"]');
      const lightIcon = mobileThemeToggle.querySelector('[data-icon="light"]');
      
      if (darkIcon && lightIcon) {
        if (isDark) {
          darkIcon.classList.add('hidden');
          lightIcon.classList.remove('hidden');
        } else {
          darkIcon.classList.remove('hidden');
          lightIcon.classList.add('hidden');
        }
      }
    }
  }

  // Add scroll listener with null check
  window.addEventListener('scroll', () => {
    if (!header) return;
    
    if (window.scrollY > 10) {
      header.classList.add('shadow-md');
      header.classList.replace('bg-white/90', 'bg-white/95');
      header.classList.replace('dark:bg-neutral-800/90', 'dark:bg-neutral-800/95');
    } else {
      header.classList.remove('shadow-md');
      header.classList.replace('bg-white/95', 'bg-white/90');
      header.classList.replace('dark:bg-neutral-800/95', 'dark:bg-neutral-800/90');
    }
  });

  // Mobile menu toggle with null check
  if (mobileMenuBtn && mobileMenu) {
    mobileMenuBtn.addEventListener('click', () => {
      const spans = mobileMenuBtn.querySelectorAll('span');
      
      if (mobileMenu.classList.contains('hidden')) {
        mobileMenu.classList.remove('hidden');
        mobileMenu.classList.add('flex');
        document.body.style.overflow = 'hidden';
        
        // Animate menu button
        if (spans[0]) spans[0].classList.add('rotate-45', 'translate-y-2');
        if (spans[1]) spans[1].classList.add('opacity-0');
        if (spans[2]) spans[2].classList.add('-rotate-45', '-translate-y-2');
      } else {
        mobileMenu.classList.add('hidden');
        mobileMenu.classList.remove('flex');
        document.body.style.overflow = '';
        
        // Animate menu button
        if (spans[0]) spans[0].classList.remove('rotate-45', 'translate-y-2');
        if (spans[1]) spans[1].classList.remove('opacity-0');
        if (spans[2]) spans[2].classList.remove('-rotate-45', '-translate-y-2');
      }
    });

    // Close mobile menu when clicking a link
    document.querySelectorAll('#mobile-menu a').forEach(link => {
      link.addEventListener('click', () => {
        mobileMenu.classList.add('hidden');
        mobileMenu.classList.remove('flex');
        document.body.style.overflow = '';
        
        const spans = mobileMenuBtn.querySelectorAll('span');
        if (spans[0]) spans[0].classList.remove('rotate-45', 'translate-y-2');
        if (spans[1]) spans[1].classList.remove('opacity-0');
        if (spans[2]) spans[2].classList.remove('-rotate-45', '-translate-y-2');
      });
    });
  }

  // Theme toggle functionality
  function setupThemeToggle(toggleElement) {
    if (!toggleElement) return;
    
    toggleElement.addEventListener('click', function() {
      // Toggle dark class
      document.documentElement.classList.toggle('dark');
      
      // Update localStorage
      const isDark = document.documentElement.classList.contains('dark');
      localStorage.setItem('color-theme', isDark ? 'dark' : 'light');
      
      // Update both theme toggle buttons
      updateThemeToggleState();
    });
  }
  
  // Set up theme toggle for both desktop and mobile
  setupThemeToggle(themeToggle);
  setupThemeToggle(mobileThemeToggle);
  
  // Initialize theme toggle state on page load
  document.addEventListener('DOMContentLoaded', updateThemeToggleState);
</script>