---
// Notifications.astro - A comprehensive notification system for the platform
import { createClient } from '@supabase/supabase-js';

// Get Supabase credentials from environment variables
const supabaseUrl = import.meta.env.SUPABASE_URL;
const supabaseKey = import.meta.env.SUPABASE_KEY;
const supabase = createClient(supabaseUrl, supabaseKey);

// Get user ID from props or session
const { userId } = Astro.props;

// Placeholder for notifications that would come from the database
const notificationTypes = {
  PROJECT_AWARDED: 'project-awarded',
  NEW_MESSAGE: 'new-message',
  PAYMENT_RECEIVED: 'payment-received',
  MILESTONE_COMPLETED: 'milestone-completed',
  REVIEW_RECEIVED: 'review-received',
  PROJECT_INVITATION: 'project-invitation',
  DEADLINE_REMINDER: 'deadline-reminder',
  SYSTEM_ANNOUNCEMENT: 'system-announcement'
};

// Define notification icons by type
const notificationIcons = {
  [notificationTypes.PROJECT_AWARDED]: 'trophy',
  [notificationTypes.NEW_MESSAGE]: 'chat',
  [notificationTypes.PAYMENT_RECEIVED]: 'cash',
  [notificationTypes.MILESTONE_COMPLETED]: 'check-circle',
  [notificationTypes.REVIEW_RECEIVED]: 'star',
  [notificationTypes.PROJECT_INVITATION]: 'mail',
  [notificationTypes.DEADLINE_REMINDER]: 'clock',
  [notificationTypes.SYSTEM_ANNOUNCEMENT]: 'information-circle'
};
---

<div class="notifications-wrapper">
  <!-- Notification Bell -->
  <div class="relative">
    <button
      id="notifications-toggle"
      class="flex items-center justify-center w-10 h-10 rounded-full hover:bg-gray-100 dark:hover:bg-gray-700 focus:outline-none focus:ring-2 focus:ring-purple-500"
      aria-label="Notifications"
    >
      <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 text-gray-600 dark:text-gray-300" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 17h5l-1.405-1.405A2.032 2.032 0 0118 14.158V11a6.002 6.002 0 00-4-5.659V5a2 2 0 10-4 0v.341C7.67 6.165 6 8.388 6 11v3.159c0 .538-.214 1.055-.595 1.436L4 17h5m6 0v1a3 3 0 11-6 0v-1m6 0H9" />
      </svg>
      <span id="notification-badge" class="absolute top-0 right-0 h-5 w-5 flex items-center justify-center rounded-full bg-red-500 text-white text-xs font-bold"></span>
    </button>
    
    <!-- Notification Dropdown -->
    <div id="notifications-dropdown" class="hidden absolute right-0 mt-2 w-80 bg-white dark:bg-gray-800 rounded-md shadow-lg py-1 z-50">
      <div class="px-4 py-3 border-b border-gray-200 dark:border-gray-700">
        <div class="flex justify-between items-center">
          <h3 class="text-lg font-semibold text-gray-900 dark:text-white">Notifications</h3>
          <div>
            <button id="mark-all-read" class="text-sm text-purple-600 dark:text-purple-400 hover:text-purple-800 dark:hover:text-purple-300">
              Mark all as read
            </button>
          </div>
        </div>
      </div>
      
      <div id="notifications-list" class="max-h-96 overflow-y-auto">
        <!-- Notifications will be populated here -->
        <div class="px-4 py-3 text-center text-sm text-gray-500 dark:text-gray-400">
          Loading notifications...
        </div>
      </div>
      
      <div class="px-4 py-2 border-t border-gray-200 dark:border-gray-700 text-center">
        <a href="/notifications" class="text-sm text-purple-600 dark:text-purple-400 hover:text-purple-800 dark:hover:text-purple-300">
          View all notifications
        </a>
      </div>
    </div>
  </div>
</div>

<!-- Toast Container for New Notifications -->
<div id="toast-container" class="fixed bottom-4 right-4 z-50 space-y-2"></div>

<script>
  // Elements
  const notificationsToggle = document.getElementById('notifications-toggle');
  const notificationsDropdown = document.getElementById('notifications-dropdown');
  const notificationsList = document.getElementById('notifications-list');
  const notificationBadge = document.getElementById('notification-badge');
  const markAllReadBtn = document.getElementById('mark-all-read');
  const toastContainer = document.getElementById('toast-container');
  
  // Notification state
  let notifications = [];
  let unreadCount = 0;
  let userId = '${userId || ""}';
  
  // Notification icons (SVG paths for each type)
  const icons = {
    'project-awarded': '<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 3v4M3 5h4M6 17v4m-2-2h4m5-16l2.286 6.857L21 12l-5.714 2.143L13 21l-2.286-6.857L5 12l5.714-2.143L13 3z" />',
    'new-message': '<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z" />',
    'payment-received': '<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 9V7a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2m2 4h10a2 2 0 002-2v-6a2 2 0 00-2-2H9a2 2 0 00-2 2v6a2 2 0 002 2zm7-5a2 2 0 11-4 0 2 2 0 014 0z" />',
    'milestone-completed': '<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />',
    'review-received': '<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11.049 2.927c.3-.921 1.603-.921 1.902 0l1.519 4.674a1 1 0 00.95.69h4.915c.969 0 1.371 1.24.588 1.81l-3.976 2.888a1 1 0 00-.363 1.118l1.518 4.674c.3.922-.755 1.688-1.538 1.118l-3.976-2.888a1 1 0 00-1.176 0l-3.976 2.888c-.783.57-1.838-.197-1.538-1.118l1.518-4.674a1 1 0 00-.363-1.118l-3.976-2.888c-.784-.57-.38-1.81.588-1.81h4.914a1 1 0 00.951-.69l1.519-4.674z" />',
    'project-invitation': '<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 8l7.89 5.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z" />',
    'deadline-reminder': '<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />',
    'system-announcement': '<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />'
  };
  
  // Initialize
  document.addEventListener('DOMContentLoaded', () => {
    setupEventListeners();
    fetchNotifications();
    initializeRealtimeUpdates();
  });
  
  // Event listeners
  function setupEventListeners() {
    // Toggle notifications dropdown
    notificationsToggle.addEventListener('click', () => {
      notificationsDropdown.classList.toggle('hidden');
      
      // If showing notifications, mark as seen
      if (!notificationsDropdown.classList.contains('hidden')) {
        markNotificationsAsSeen();
      }
    });
    
    // Close dropdown when clicking outside
    document.addEventListener('click', (e) => {
      if (!notificationsToggle.contains(e.target) && 
          !notificationsDropdown.contains(e.target)) {
        notificationsDropdown.classList.add('hidden');
      }
    });
    
    // Mark all as read
    markAllReadBtn.addEventListener('click', markAllAsRead);
  }
  
  // Fetch notifications from the server
  async function fetchNotifications() {
    if (!userId) return;
    
    try {
      const response = await fetch('/api/notifications', {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${localStorage.getItem('supabase.auth.token')}`
        }
      });
      
      if (response.ok) {
        const data = await response.json();
        notifications = data.notifications || [];
        renderNotifications();
        updateUnreadCount();
      } else {
        console.error('Failed to fetch notifications');
      }
    } catch (error) {
      console.error('Error fetching notifications:', error);
      notificationsList.innerHTML = '<div class="px-4 py-3 text-center text-sm text-red-500">Failed to load notifications</div>';
    }
  }
  
  // Render notifications in the dropdown
  function renderNotifications() {
    if (notifications.length === 0) {
      notificationsList.innerHTML = '<div class="px-4 py-3 text-center text-sm text-gray-500 dark:text-gray-400">No notifications</div>';
      return;
    }
    
    notificationsList.innerHTML = '';
    notifications.slice(0, 5).forEach(notification => {
      const notificationElement = createNotificationElement(notification);
      notificationsList.appendChild(notificationElement);
    });
  }
  
  // Create a single notification element
  function createNotificationElement(notification) {
    const element = document.createElement('div');
    element.className = `px-4 py-3 hover:bg-gray-50 dark:hover:bg-gray-700 ${notification.read ? '' : 'bg-purple-50 dark:bg-purple-900 dark:bg-opacity-20'}`;
    
    // Get icon for notification type
    const iconSvg = icons[notification.type] || icons['system-announcement'];
    
    element.innerHTML = `
      <div class="flex items-start">
        <div class="flex-shrink-0 mr-3">
          <div class="w-8 h-8 rounded-full flex items-center justify-center ${notification.read ? 'bg-gray-200 dark:bg-gray-700' : 'bg-purple-100 dark:bg-purple-800'}">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 ${notification.read ? 'text-gray-500 dark:text-gray-400' : 'text-purple-600 dark:text-purple-300'}" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              ${iconSvg}
            </svg>
          </div>
        </div>
        <div class="flex-1 min-w-0">
          <p class="text-sm font-medium ${notification.read ? 'text-gray-900 dark:text-white' : 'text-purple-900 dark:text-purple-100'}">
            ${notification.title}
          </p>
          <p class="text-xs text-gray-500 dark:text-gray-400">
            ${notification.content}
          </p>
          <p class="text-xs text-gray-400 dark:text-gray-500 mt-1">
            ${formatTimeAgo(notification.created_at)}
          </p>
        </div>
        <div class="ml-3">
          <button class="text-gray-400 hover:text-gray-500 dark:hover:text-gray-300" data-notification-id="${notification.id}" aria-label="Mark as read">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
            </svg>
          </button>
        </div>
      </div>
    `;
    
    // Add click event for the whole notification
    element.addEventListener('click', (e) => {
      // If the click was on the close button, mark as read
      if (e.target.closest('[data-notification-id]')) {
        e.stopPropagation();
        const notificationId = e.target.closest('[data-notification-id]').getAttribute('data-notification-id');
        markAsRead(notificationId);
      } else {
        // Otherwise navigate to the notification target
        handleNotificationClick(notification);
      }
    });
    
    return element;
  }
  
  // Update the unread count badge
  function updateUnreadCount() {
    unreadCount = notifications.filter(n => !n.read).length;
    
    if (unreadCount > 0) {
      notificationBadge.textContent = unreadCount > 9 ? '9+' : unreadCount;
      notificationBadge.classList.remove('hidden');
    } else {
      notificationBadge.classList.add('hidden');
    }
  }
  
  // Mark a notification as read
  async function markAsRead(notificationId) {
    try {
      const response = await fetch(`/api/notifications/${notificationId}/read`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${localStorage.getItem('supabase.auth.token')}`
        }
      });
      
      if (response.ok) {
        // Update local state
        notifications = notifications.map(n => 
          n.id === notificationId ? { ...n, read: true } : n
        );
        renderNotifications();
        updateUnreadCount();
      }
    } catch (error) {
      console.error('Error marking notification as read:', error);
    }
  }
  
  // Mark all notifications as read
  async function markAllAsRead() {
    try {
      const response = await fetch('/api/notifications/mark-all-read', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${localStorage.getItem('supabase.auth.token')}`
        }
      });
      
      if (response.ok) {
        // Update local state
        notifications = notifications.map(n => ({ ...n, read: true }));
        renderNotifications();
        updateUnreadCount();
      }
    } catch (error) {
      console.error('Error marking all notifications as read:', error);
    }
  }
  
  // Mark notifications as seen (viewed but not necessarily read)
  async function markNotificationsAsSeen() {
    if (unreadCount === 0) return;
    
    try {
      await fetch('/api/notifications/mark-seen', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${localStorage.getItem('supabase.auth.token')}`
        }
      });
    } catch (error) {
      console.error('Error marking notifications as seen:', error);
    }
  }
  
  // Handle notification click (navigate to relevant page)
  function handleNotificationClick(notification) {
    // Different actions based on notification type
    switch (notification.type) {
      case 'project-awarded':
      case 'milestone-completed':
        window.location.href = `/projects/${notification.project_id}`;
        break;
      case 'new-message':
        window.location.href = `/chat/${notification.conversation_id}`;
        break;
      case 'payment-received':
        window.location.href = `/profile/earnings`;
        break;
      case 'review-received':
        window.location.href = `/profile/reviews`;
        break;
      case 'project-invitation':
        window.location.href = `/projects/invitations`;
        break;
      case 'deadline-reminder':
        window.location.href = `/projects/${notification.project_id}#milestones`;
        break;
      case 'system-announcement':
        window.location.href = '/announcements';
        break;
      default:
        window.location.href = '/notifications';
    }
    
    // Mark as read when clicked
    markAsRead(notification.id);
  }
  
  // Initialize Supabase realtime subscription for new notifications
  function initializeRealtimeUpdates() {
    if (!userId) return;
    
    // Use Supabase realtime subscriptions in production
    const channel = supabase.channel('public:notifications');

    channel
      .on('postgres_changes', { 
        event: 'INSERT', 
        schema: 'public', 
        table: 'notifications',
        filter: `user_id=eq.${userId}` 
      }, (payload) => {
        handleNewNotification(payload.new);
      })
      .subscribe();
  }
  
  // Handle incoming new notification
  function handleNewNotification(notification) {
    // Add to our list
    notifications.unshift(notification);
    
    // Update UI
    renderNotifications();
    updateUnreadCount();
    
    // Show toast notification
    showToast(notification);
  }
  
  // Show toast notification for new notifications
  function showToast(notification) {
    const toast = document.createElement('div');
    toast.className = 'flex items-center p-4 mb-4 w-full max-w-xs text-gray-500 bg-white rounded-lg shadow dark:text-gray-400 dark:bg-gray-800 transition-opacity duration-300 opacity-0';
    
    // Get icon for notification type
    const iconSvg = icons[notification.type] || icons['system-announcement'];
    
    toast.innerHTML = `
      <div class="inline-flex flex-shrink-0 justify-center items-center w-8 h-8 text-purple-500 bg-purple-100 rounded-lg dark:bg-purple-800 dark:text-purple-200">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          ${iconSvg}
        </svg>
      </div>
      <div class="ml-3 text-sm font-normal">
        <div class="font-semibold text-gray-900 dark:text-white">${notification.title}</div>
        <div>${notification.content}</div>
      </div>
      <button type="button" class="ml-auto -mx-1.5 -my-1.5 bg-white text-gray-400 hover:text-gray-900 rounded-lg focus:ring-2 focus:ring-gray-300 p-1.5 hover:bg-gray-100 inline-flex h-8 w-8 dark:text-gray-500 dark:hover:text-white dark:bg-gray-800 dark:hover:bg-gray-700" aria-label="Close">
        <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd"></path></svg>
      </button>
    `;
    
    // Add event listener to close button
    toast.querySelector('button').addEventListener('click', () => {
      toast.classList.remove('opacity-100');
      toast.classList.add('opacity-0');
      setTimeout(() => {
        toast.remove();
      }, 300);
    });
    
    // Add event listener to navigate on click
    toast.addEventListener('click', (e) => {
      if (!e.target.closest('button')) {
        handleNotificationClick(notification);
      }
    });
    
    // Add to container
    toastContainer.appendChild(toast);
    
    // Animate in
    setTimeout(() => {
      toast.classList.remove('opacity-0');
      toast.classList.add('opacity-100');
    }, 10);
    
    // Auto-remove after 5 seconds
    setTimeout(() => {
      if (toast.parentNode) {
        toast.classList.remove('opacity-100');
        toast.classList.add('opacity-0');
        setTimeout(() => {
          toast.remove();
        }, 300);
      }
    }, 5000);
  }
  
  // Format timestamp to relative time (e.g. "5 minutes ago")
  function formatTimeAgo(timestamp) {
    const date = new Date(timestamp);
    const now = new Date();
    const seconds = Math.floor((now - date) / 1000);
    
    let interval = Math.floor(seconds / 31536000);
    if (interval >= 1) {
      return interval === 1 ? '1 year ago' : `${interval} years ago`;
    }
    
    interval = Math.floor(seconds / 2592000);
    if (interval >= 1) {
      return interval === 1 ? '1 month ago' : `${interval} months ago`;
    }
    
    interval = Math.floor(seconds / 86400);
    if (interval >= 1) {
      return interval === 1 ? '1 day ago' : `${interval} days ago`;
    }
    
    interval = Math.floor(seconds / 3600);
    if (interval >= 1) {
      return interval === 1 ? '1 hour ago' : `${interval} hours ago`;
    }
    
    interval = Math.floor(seconds / 60);
    if (interval >= 1) {
      return interval === 1 ? '1 minute ago' : `${interval} minutes ago`;
    }
    
    return seconds < 10 ? 'just now' : `${seconds} seconds ago`;
  }
</script>

<style>
  /* Animation for new notifications */
  @keyframes pulse {
    0%, 100% {
      transform: scale(1);
    }
    50% {
      transform: scale(1.05);
    }
  }

  #notification-badge:not(.hidden) {
    animation: pulse 2s infinite;
  }
  
  /* Toast notification animations */
  #toast-container > div {
    transition: opacity 0.3s ease-in-out;
  }
</style>