---
import { supabase } from '../lib/supabase.js';

// Props for component flexibility
const { 
  mode = 'sign-up', // 'sign-up', 'sign-in', 'reset-password'
  redirectUrl = '/profile',
  showSocial = true,
} = Astro.props;

// Page title and button text based on mode
const titles = {
  'sign-up': 'Create an Account',
  'sign-in': 'Welcome Back',
  'reset-password': 'Reset Your Password'
};

const buttonTexts = {
  'sign-up': 'Sign Up',
  'sign-in': 'Sign In',
  'reset-password': 'Send Reset Link'
};

const title = titles[mode];
const buttonText = buttonTexts[mode];

// Determine which fields to show based on mode
const showNameField = mode === 'sign-up';
const showPasswordField = mode !== 'reset-password';
const showRoleField = mode === 'sign-up';
const showForgotPassword = mode === 'sign-in';
const showLoginLink = mode === 'sign-up' || mode === 'reset-password';
const showSignUpLink = mode === 'sign-in';
---

<div class="bg-white dark:bg-neutral-800 rounded-2xl shadow-soft p-8 max-w-md w-full mx-auto">
  <h2 class="text-2xl font-heading font-bold mb-6 text-center">{title}</h2>
  
  <form id="auth-form" class="space-y-4">
    <input type="hidden" name="mode" value={mode} />
    <input type="hidden" name="redirectUrl" value={redirectUrl} />
    
    {showNameField && (
      <div class="form-group">
        <label for="name" class="form-label dark:text-neutral-200">Full Name</label>
        <input 
          type="text" 
          id="name" 
          name="name" 
          class="form-input dark:bg-neutral-700 dark:border-neutral-600 dark:text-white" 
          placeholder="Your full name"
          required 
        />
      </div>
    )}
    
    <div class="form-group">
      <label for="email" class="form-label dark:text-neutral-200">Email Address</label>
      <input 
        type="email" 
        id="email" 
        name="email" 
        class="form-input dark:bg-neutral-700 dark:border-neutral-600 dark:text-white" 
        placeholder="your.email@example.com"
        required 
      />
    </div>
    
    {showPasswordField && (
      <div class="form-group">
        <label for="password" class="form-label dark:text-neutral-200">Password</label>
        <input 
          type="password" 
          id="password" 
          name="password" 
          class="form-input dark:bg-neutral-700 dark:border-neutral-600 dark:text-white" 
          placeholder={mode === 'sign-up' ? 'Create a strong password' : 'Enter your password'}
          minlength={mode === 'sign-up' ? "8" : undefined}
          required={mode !== 'reset-password'}
        />
      </div>
    )}
    
    {showRoleField && (
      <div class="form-group">
        <label for="role" class="form-label dark:text-neutral-200">I am a</label>
        <select 
          id="role" 
          name="role" 
          class="form-input dark:bg-neutral-700 dark:border-neutral-600 dark:text-white" 
          required={mode === 'sign-up'}
        >
          <option value="" disabled selected>Choose your role</option>
          <option value="client">Client - I need projects completed</option>
          <option value="freelancer">Freelancer - I offer my services</option>
        </select>
      </div>
    )}
    
    <div class="form-group">
      <button type="submit" id="submit-btn" class="btn-primary w-full">
        <span id="button-text">{buttonText}</span>
        <span id="button-loading" class="hidden">
          <svg class="animate-spin -ml-1 mr-2 h-4 w-4 text-white inline" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
            <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
            <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
          </svg>
          Processing...
        </span>
      </button>
    </div>
    
    <div class="text-center text-sm">
      {showForgotPassword && (
        <a href="/reset-password" class="text-primary-600 dark:text-primary-400 hover:underline">Forgot password?</a>
      )}
      
      {showLoginLink && (
        <div class="dark:text-neutral-400">
          Already have an account? 
          <a href="/login" class="text-primary-600 dark:text-primary-400 hover:underline">Sign in</a>
        </div>
      )}
      
      {showSignUpLink && (
        <div class="dark:text-neutral-400">
          Don't have an account? 
          <a href="/signup" class="text-primary-600 dark:text-primary-400 hover:underline">Sign up</a>
        </div>
      )}
    </div>
  </form>
  
  {showSocial && (
    <div class="mt-8">
      <div class="relative">
        <div class="absolute inset-0 flex items-center">
          <div class="w-full border-t border-neutral-200 dark:border-neutral-700"></div>
        </div>
        <div class="relative flex justify-center text-sm">
          <span class="px-2 bg-white dark:bg-neutral-800 text-neutral-500 dark:text-neutral-400">
            Or continue with
          </span>
        </div>
      </div>
      
      <div class="mt-4 grid grid-cols-2 gap-3">
        <button type="button" id="google-auth" class="flex items-center justify-center py-2 px-4 bg-white dark:bg-neutral-700 border border-neutral-200 dark:border-neutral-600 rounded-lg shadow-sm hover:bg-neutral-50 dark:hover:bg-neutral-600 transition-colors">
          <svg class="w-5 h-5 mr-2" viewBox="0 0 24 24">
            <path d="M12.545,10.239v3.821h5.445c-0.712,2.315-2.647,3.972-5.445,3.972c-3.332,0-6.033-2.701-6.033-6.032s2.701-6.032,6.033-6.032c1.498,0,2.866,0.549,3.921,1.453l2.814-2.814C17.503,2.988,15.139,2,12.545,2C7.021,2,2.543,6.477,2.543,12s4.478,10,10.002,10c8.396,0,10.249-7.85,9.426-11.748L12.545,10.239z" fill="currentColor"/>
          </svg>
          Google
        </button>
        <button type="button" id="github-auth" class="flex items-center justify-center py-2 px-4 bg-white dark:bg-neutral-700 border border-neutral-200 dark:border-neutral-600 rounded-lg shadow-sm hover:bg-neutral-50 dark:hover:bg-neutral-600 transition-colors">
          <svg class="w-5 h-5 mr-2" viewBox="0 0 24 24" fill="currentColor">
            <path fill-rule="evenodd" clip-rule="evenodd" d="M12 2C6.477 2 2 6.477 2 12c0 4.42 2.87 8.17 6.84 9.5.5.08.66-.23.66-.5v-1.69c-2.77.6-3.36-1.34-3.36-1.34-.46-1.16-1.11-1.47-1.11-1.47-.91-.62.07-.6.07-.6 1 .07 1.53 1.03 1.53 1.03.87 1.52 2.34 1.07 2.91.83.09-.65.35-1.09.63-1.34-2.22-.25-4.55-1.11-4.55-4.92 0-1.11.38-2 1.03-2.71-.1-.25-.45-1.29.1-2.64 0 0 .84-.27 2.75 1.02.79-.22 1.65-.33 2.5-.33.85 0 1.71.11 2.5.33 1.91-1.29 2.75-1.02 2.75-1.02.55 1.35.2 2.39.1 2.64.65.71 1.03 1.6 1.03 2.71 0 3.82-2.34 4.66-4.57 4.91.36.31.69.92.69 1.85V21c0 .27.16.59.67.5C19.14 20.16 22 16.42 22 12A10 10 0 0012 2z" />
          </svg>
          GitHub
        </button>
      </div>
    </div>
  )}
  
  <!-- Error alert - hidden by default -->
  <div id="error-alert" class="hidden mt-4 bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative" role="alert">
    <span id="error-message" class="block sm:inline"></span>
  </div>
</div>

<script>
  // DOM elements
  const form = document.getElementById('auth-form');
  const submitBtn = document.getElementById('submit-btn');
  const buttonText = document.getElementById('button-text');
  const buttonLoading = document.getElementById('button-loading');
  const errorAlert = document.getElementById('error-alert');
  const errorMessage = document.getElementById('error-message');
  const googleAuthBtn = document.getElementById('google-auth');
  const githubAuthBtn = document.getElementById('github-auth');
  
  // Add event listener for form submission
  if (form) {
    form.addEventListener('submit', async (e) => {
      e.preventDefault();
      
      // Get form data
      const formData = new FormData(form);
      const mode = formData.get('mode');
      const email = formData.get('email');
      const password = formData.get('password');
      const name = formData.get('name');
      const role = formData.get('role');
      const redirectUrl = formData.get('redirectUrl');
      
      // Show loading state
      if (submitBtn && buttonText && buttonLoading) {
        submitBtn.disabled = true;
        buttonText.classList.add('hidden');
        buttonLoading.classList.remove('hidden');
      }
      
      try {
        // Hide any previous error
        if (errorAlert) errorAlert.classList.add('hidden');
        
        // Handle different authentication modes
        if (mode === 'sign-up') {
          // Implement sign up logic
          const { data, error } = await supabase.auth.signUp({
            email,
            password,
            options: {
              data: {
                full_name: name,
                role: role
              }
            }
          });
          
          if (error) throw error;
          
          // Redirect or show confirmation
          window.location.href = redirectUrl || '/profile';
          
        } else if (mode === 'sign-in') {
          // Implement sign in logic
          const { data, error } = await supabase.auth.signInWithPassword({
            email,
            password
          });
          
          if (error) throw error;
          
          // Redirect
          window.location.href = redirectUrl || '/profile';
          
        } else if (mode === 'reset-password') {
          // Implement password reset logic
          const { data, error } = await supabase.auth.resetPasswordForEmail(email, {
            redirectTo: `${window.location.origin}/reset-password-confirmation`
          });
          
          if (error) throw error;
          
          // Show success message
          alert('Check your email for a password reset link');
        }
        
      } catch (error) {
        // Display error
        if (errorAlert && errorMessage) {
          errorMessage.textContent = error.message || 'An error occurred during authentication.';
          errorAlert.classList.remove('hidden');
        }
        console.error('Authentication error:', error);
      } finally {
        // Restore button state
        if (submitBtn && buttonText && buttonLoading) {
          submitBtn.disabled = false;
          buttonText.classList.remove('hidden');
          buttonLoading.classList.add('hidden');
        }
      }
    });
  }
  
  // Social login handlers
  if (googleAuthBtn) {
    googleAuthBtn.addEventListener('click', async () => {
      try {
        const { data, error } = await supabase.auth.signInWithOAuth({
          provider: 'google',
          options: {
            redirectTo: `${window.location.origin}/auth/callback`
          }
        });
        
        if (error) throw error;
      } catch (error) {
        console.error('Google auth error:', error);
      }
    });
  }
  
  if (githubAuthBtn) {
    githubAuthBtn.addEventListener('click', async () => {
      try {
        const { data, error } = await supabase.auth.signInWithOAuth({
          provider: 'github',
          options: {
            redirectTo: `${window.location.origin}/auth/callback`
          }
        });
        
        if (error) throw error;
      } catch (error) {
        console.error('GitHub auth error:', error);
      }
    });
  }
</script>