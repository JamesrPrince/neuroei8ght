---
// LanguageSelector.astro - Component for switching between available languages
import { LANGUAGES, DEFAULT_LANGUAGE } from '../i18n/config';
import { getAvailableLanguages } from '../i18n/utils';

// Define language interfaces
interface LanguageInfo {
  code: string;
  name: string;
  locale: string;
  flag: string;
}

interface Languages {
  [key: string]: LanguageInfo;
}

// Get the current language from props or use default
const { currentLanguage = DEFAULT_LANGUAGE } = Astro.props;

// Type assertion for LANGUAGES object
const typedLanguages = LANGUAGES as Languages;

// Get all available languages
const availableLanguages = getAvailableLanguages();
---

<div class="language-selector relative">
  <button
    id="language-dropdown-toggle"
    class="flex items-center space-x-2 px-2 py-2 rounded-md hover:bg-neutral-100 dark:hover:bg-neutral-700 text-neutral-700 dark:text-neutral-300 transition-colors"
    aria-label="Select language"
  >
    <img src={typedLanguages[currentLanguage].flag} alt={typedLanguages[currentLanguage].name + ' flag'} class="flag-img" width="24" height="18" />
    <span class="font-medium hidden sm:inline">{typedLanguages[currentLanguage].name}</span>
    <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 transition-transform duration-200" fill="none" viewBox="0 0 24 24" stroke="currentColor">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7" />
    </svg>
  </button>
  
  <!-- Language Dropdown -->
  <div 
    id="language-dropdown" 
    class="hidden absolute right-0 mt-2 py-2 w-48 bg-white dark:bg-neutral-800 rounded-lg shadow-soft z-10 border border-neutral-200 dark:border-neutral-700"
  >
    {availableLanguages.map(language => (
      <button
        class={`w-full text-left px-4 py-2 hover:bg-neutral-100 dark:hover:bg-neutral-700 flex items-center space-x-3 transition-colors ${
          language.code === currentLanguage ? 'bg-neutral-100 dark:bg-neutral-700' : ''
        }`}
        data-language-code={language.code}
      >
        <img src={language.flag} alt={language.name + ' flag'} class="flag-img" width="24" height="18" />
        <span class="text-neutral-800 dark:text-neutral-200">{language.name}</span>
        {language.code === currentLanguage && (
          <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 text-primary-500 ml-auto" viewBox="0 0 20 20" fill="currentColor">
            <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd" />
          </svg>
        )}
      </button>
    ))}
  </div>
</div>

<script>
  // Get elements
  const dropdownToggle = document.getElementById('language-dropdown-toggle');
  const dropdown = document.getElementById('language-dropdown');
  const languageButtons = document.querySelectorAll('[data-language-code]');
  const dropdownIcon = dropdownToggle?.querySelector('svg');
  
  // Toggle dropdown visibility
  if (dropdownToggle && dropdown) {
    dropdownToggle.addEventListener('click', () => {
      const isHidden = dropdown.classList.contains('hidden');
      dropdown.classList.toggle('hidden');
      
      // Rotate arrow icon
      if (dropdownIcon) {
        if (isHidden) {
          dropdownIcon.classList.add('rotate-180');
        } else {
          dropdownIcon.classList.remove('rotate-180');
        }
      }
    });
    
    // Close dropdown when clicking outside
    document.addEventListener('click', (event: MouseEvent) => {
      const target = event.target as HTMLElement;
      const isClickInside = dropdownToggle.contains(target) || dropdown.contains(target);
      if (!isClickInside && !dropdown.classList.contains('hidden')) {
        dropdown.classList.add('hidden');
        if (dropdownIcon) dropdownIcon.classList.remove('rotate-180');
      }
    });
  }
  
  // Handle language selection
  languageButtons.forEach(button => {
    button.addEventListener('click', () => {
      const langCode = button.getAttribute('data-language-code');
      if (langCode) {
        // Show loading state
        button.classList.add('opacity-75');
        
        // Save the selected language preference
        localStorage.setItem('preferredLanguage', langCode);
        
        // Reload the page to apply the language change
        const currentUrl = new URL(window.location.href);
        currentUrl.searchParams.set('lang', langCode);
        window.location.href = currentUrl.toString();
      }
    });
  });
</script>

<style>
  /* Animation for dropdown */
  #language-dropdown {
    opacity: 0;
    transform: translateY(-10px);
    transition: opacity 0.2s ease, transform 0.2s ease;
  }
  
  #language-dropdown:not(.hidden) {
    opacity: 1;
    transform: translateY(0);
  }
  
  /* First item rounded corners */
  #language-dropdown button:first-child {
    border-top-left-radius: 0.5rem;
    border-top-right-radius: 0.5rem;
  }
  
  /* Last item rounded corners */
  #language-dropdown button:last-child {
    border-bottom-left-radius: 0.5rem;
    border-bottom-right-radius: 0.5rem;
  }

  .flag-emoji {
    font-family: 'Apple Color Emoji', 'Segoe UI Emoji', 'Noto Color Emoji', 'EmojiOne Color', 'Twemoji Mozilla', sans-serif;
    font-size: 1.5rem;
    line-height: 1;
    vertical-align: middle;
  }

  .flag-img {
    display: inline-block;
    width: 1.5rem;
    height: 1.125rem;
    object-fit: contain;
    vertical-align: middle;
    margin-right: 0.25rem;
  }
</style>